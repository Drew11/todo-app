{"version":3,"sources":["components/NewTodos.js","App.js","serviceWorker.js","index.js"],"names":["NewTodos","_ref","text","index","remove","edit","setItemStatus","status","react_default","a","createElement","key","data-index","className","id","type","checked","onChange","event","htmlFor","onClick","TodoApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","todos","todoIndex","completed","clickedComplete","editing","removeTodo","bind","assertThisInitialized","setEditingStatus","addEditingValues","getCompletedTodos","getAllTodos","clearCompletedTodos","upDateTodos","toConsumableArray","filter","curr","i","setState","target","value","alert","which","completedTodos","todo","clearTodos","_this2","console","log","todosItem","map","item","components_NewTodos","onKeyPress","initialTodo","concat","placeholder","defaultValue","length","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0840aadd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n function NewTodos(\r\n     {text,\r\n      index,\r\n      remove ,\r\n      edit,\r\n      setItemStatus,\r\n      status\r\n     }\r\n )\r\n {\r\n        return <li\r\n                key={text}\r\n                data-index={index}\r\n                className={'todo'}\r\n        >\r\n           <div className={\"todo-check\"}>\r\n               <input\r\n                   id={\"check-\"+index}\r\n                   className=\"todo-check-box\"\r\n                   type=\"checkbox\"\r\n                   checked={status}\r\n                   onChange={(event)=>setItemStatus(event,index)}\r\n               />\r\n                <label\r\n                   htmlFor ={\"check-\"+index}\r\n                />\r\n           </div>\r\n            <span className={\"todo-text\"}\r\n                key={index}\r\n                onClick={()=>edit(index)}\r\n            > {text}</span>\r\n\r\n            <button\r\n                className={\"todo-remove\"}\r\n                onClick={()=>remove(index)}\r\n            >âœ•</button>\r\n         </li>\r\n }\r\n\r\n export default NewTodos;","import React from 'react';\nimport NewTodo from './components/NewTodos';\n\nimport './App.css';\n\nclass TodoApp extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            active: false,\n            todos: [],\n            todoIndex: null,\n            completed: [],\n            clickedComplete: false,\n            editing: false,\n        };\n\n        this.removeTodo = this.removeTodo.bind(this);\n        this.setEditingStatus = this.setEditingStatus.bind(this);\n        this.addEditingValues = this.addEditingValues.bind(this);\n        this.setItemStatus = this.setItemStatus.bind(this);\n        this.getCompletedTodos = this.getCompletedTodos.bind(this);\n        this.getAllTodos = this.getAllTodos.bind(this);\n        this.clearCompletedTodos = this.clearCompletedTodos.bind(this);\n\n    }\n\n    removeTodo(index) {\n        const todos = [...this.state.todos],\n            upDateTodos = todos.filter((curr, i) => i!==index);\n        this.setState({todos: upDateTodos})\n    }\n\n    setEditingStatus(index) {\n        this.setState({\n            editing: true,\n            todoIndex: index\n        });\n    }\n\n    addEditingValues(event) {\n        if(!event.target.value){\n            return alert(\"sorry empty text, type something\")\n        }\n        const todos = [...this.state.todos];\n        todos[this.state.todoIndex]['text'] = event.target.value;\n\n        if (event.which === 13) {\n            this.setState({\n                editing: false,\n                todos: todos\n            });\n        }\n    }\n\n    setItemStatus(event, index) {\n        const todos = [...this.state.todos];\n        todos[index]['completed'] = event.target.checked;\n        this.setState({todos: todos})\n    }\n\n\n    getAllTodos() {\n        const todos = [...this.state.todos];\n        this.setState({\n            todos: todos,\n            clickedComplete: false\n        })\n    }\n\n    getCompletedTodos() {\n        const todos = [...this.state.todos];\n        const completedTodos = todos.filter((todo) => todo['completed']);\n\n        this.setState({\n            completed: completedTodos,\n            clickedComplete: true\n        });\n    }\n\n    clearCompletedTodos() {\n        const todos = [...this.state.todos];\n        const clearTodos = todos.filter((todo) => !todo['completed']);\n\n        this.setState({\n            todos: clearTodos,\n            clickedComplete: false\n        });\n\n    }\n\n\n    render() {\n        console.log(this.state);\n\n        let todos = this.state.todos;\n\n\n        if (this.state.clickedComplete === true) {\n            todos = this.state.completed;\n        }\n        const todosItem = todos.map((item, index) => {\n            return <NewTodo\n                text={item['text']}\n                status={item['completed']}\n                index={index}\n                remove={this.removeTodo}\n                edit={this.setEditingStatus}\n                setItemStatus={this.setItemStatus}\n            />\n        });\n\n\n        return (\n            <section className={'todo-app'}>\n                <header className=\"todo-header\">\n                    <h1>todos</h1>\n                    <input\n                        onKeyPress={(event) => {\n                            if(event.target.value===''){\n                                return;\n                            }\n                            const initialTodo = [...this.state.todos, {\n                                text: event.target.value,\n                                completed: false\n                            }];\n\n                            if (event.which === 13) {\n                                this.setState({\n                                    todos: initialTodo\n                                });\n                            }\n                        }}\n\n                        className={\"new-todo\"}\n                        placeholder={\"What needs to be done?\"}\n                    >\n\n                    </input>\n\n                </header>\n                <main>\n                    {\n                        <ul className={\"todo-list\"}>\n                        {!this.state.editing ?\n                            this.state.todos.length>0 ? todosItem : null\n                            :\n                            <input\n                                className={\"todo-edit\"}\n                                type='text'\n                                defaultValue={this.state.todos[this.state.todoIndex]['text']}\n                                onKeyPress={(event) => {\n                                    this.addEditingValues(event)\n                                }}\n                            >\n\n                            </input>\n                        }\n                    </ul>}\n                </main>\n\n                <footer className=\"todo-status\"\n\n                >\n                    {this.state.todos.length>0?\n                        <ul className=\"todo-filters\">\n\n                            <li>\n                                <a href=\"#2\"\n                                   onClick={this.getAllTodos}\n                                >All</a>\n                            </li>\n                            <li >\n                                <a href=\"#1\"\n                                   onClick={this.getCompletedTodos}\n                                >Completed</a>\n                            </li>\n                            <li>\n                                <a href=\"#3\"\n                                   onClick={this.clearCompletedTodos}\n                                >Clear Completed</a>\n                            </li>\n                        </ul>:null\n                    }\n\n                </footer>\n            </section>\n\n        )\n    }\n}\n\nexport default TodoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoApp  />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}